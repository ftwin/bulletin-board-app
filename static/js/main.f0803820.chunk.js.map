{"version":3,"sources":["Firebase.js","Comment.js","Note.js","NewNote.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Comment","props","className","commentText","Notes","useState","comment","setComment","errorMessage","setErrorMessage","commentsArray","Object","entries","savedComments","src","noteImage","alt","altText","noteText","action","htmlFor","noteId","onChange","e","target","value","name","id","cols","rows","onClick","preventDefault","test","database","ref","child","push","aria-label","reverse","map","key","NewNote","note","setNote","console","log","placeholder","dbRef","axios","url","method","dataResponse","params","client_id","query","then","response","image","data","urls","regular","alt_description","comments","App","notes","setNotes","useEffect","on","snapshot","notesVal","val","index","Note","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0803820.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBqdnB6QWutk3c-fRetNJ9TGwD85ADZ9tk\",\r\n  authDomain: \"bulletin-board-6d24b.firebaseapp.com\",\r\n  databaseURL: \"https://bulletin-board-6d24b.firebaseio.com\",\r\n  projectId: \"bulletin-board-6d24b\",\r\n  storageBucket: \"bulletin-board-6d24b.appspot.com\",\r\n  messagingSenderId: \"261073442058\",\r\n  appId: \"1:261073442058:web:eab66046b4b18f8e9496f3\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React from \"react\";\r\n\r\nconst Comment = (props) => {\r\n\treturn (\r\n\t\t<div className=\"comments\">\r\n\t\t\t{props.commentText}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nexport default Comment;\r\n\r\n","import React, { useState } from \"react\";\r\nimport Comment from \"./Comment\"\r\nimport firebase from './Firebase.js';\r\n\r\nconst Notes = (props)=> {\r\n  const [comment, setComment] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const handleChange = e => {\r\n    //reset error message\r\n    setErrorMessage(\"\");\r\n    //record the user input\r\n    setComment(e.target.value);\r\n  };   \r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    const regEx = /\\S/;\r\n\r\n    if (regEx.test(comment)) {\r\n      //push comment to db\r\n      firebase.database().ref(props.noteId).child('comments').push(comment);\r\n      //reset error message\r\n      setErrorMessage(\"\");\r\n      //reset the user input fields\r\n      setComment(\"\");\r\n    } else {\r\n      setErrorMessage(\"please enter a comment\");\r\n    };      \r\n  };\r\n\r\n  const commentsArray = Object.entries(props.savedComments);\r\n  return (\r\n    <div className=\"note\">\r\n      <div>\r\n        <img src={props.noteImage} alt={props.altText}/>\r\n      </div>\r\n      <div className=\"noteContent\">\r\n        <p>\r\n            {props.noteText}\r\n        </p>\r\n      </div>\r\n      <div className=\"comment\">\r\n        <form action=\"\">\r\n          <label className=\"commentLabel\" htmlFor={props.noteId + \"comment\"}>Add your comment here</label>\r\n          {errorMessage !== '' ? <div className=\"error\">{errorMessage}</div> : ''}\r\n          <textarea onChange={handleChange} name=\"comment\" id={props.noteId + \"comment\"} cols=\"30\" rows=\"3\"  value={comment}></textarea>\r\n          <button className=\"commentButton\" onClick={handleSubmit} name=\"addNote\" id=\"addNote\" aria-label=\"add comment\">+</button>\r\n        </form>\r\n      </div>\r\n\r\n      {\r\n        commentsArray.reverse().map((comment) => {\r\n          return (\r\n            <Comment key={comment[0]} noteId={props.noteId} commentText={comment[1]} />\r\n          )\r\n        })\r\n      }      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Notes;\r\n\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport firebase from './Firebase.js';\r\n\r\nconst NewNote = (props) => {\r\n\r\n  const [note, setNote] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const handleChange = e => {\r\n    setErrorMessage(\"\")\r\n    //record the user input\r\n    setNote(e.target.value)\r\n\r\n    console.log(note);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    const dbRef = firebase.database().ref();\r\n    const regEx = /\\S/;\r\n\r\n    //check that input isn't empty then make api call for image then push to db\r\n    if (regEx.test(note)) {\r\n      axios({\r\n        url: `https://api.unsplash.com/photos/random`,\r\n        method: `GET`,\r\n        dataResponse: `json`,\r\n        params: {\r\n          client_id: `3538ec3e67ff5208b17b884280d4f5548757cf54956c39cbe73c070ec5442549`,\r\n          query: `cat`\r\n        }\r\n      }).then(response => {\r\n        const image = response.data.urls.regular;\r\n        const alt = response.data.alt_description\r\n\r\n        dbRef.push({ comments: \"\", note: note, image: image, altText: alt });\r\n\r\n        //reset the user input fields\r\n        setNote(\"\")\r\n        setErrorMessage(\"\")\r\n      });\r\n\r\n    } else {\r\n      setErrorMessage(\"please enter a note\");\r\n    };       \r\n  };\r\n\r\n  return (\r\n    <div className=\"newNote\">\r\n      <form action=\"\">\r\n        <label htmlFor=\"newNote\" className=\"visuallyHidden\" >Add your note here</label>\r\n        {errorMessage !== '' ? <div className=\"error\">{errorMessage}</div> : ''}\r\n        <textarea onChange={handleChange} value={note} rows=\"12\" cols=\"30\" name=\"newNote\" id=\"newNote\" placeholder=\"add your note here\"\r\n        ></textarea>\r\n        <button onClick={handleSubmit} name=\"addNote\" id=\"addNote\" aria-label=\"add note\">\r\n          +\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n  export default NewNote;","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport firebase from './Firebase.js';\r\nimport Notes from './Note.js';\r\nimport NewNote from './NewNote.js';\r\n\r\nconst App = () => {\r\n\r\n  const [notes, setNotes ] = useState([]);\r\n\r\n  \r\n  //connect app to firebase\r\n  useEffect(()=> {\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on('value', (snapshot) =>{\r\n      const notesVal = snapshot.val();\r\n      let notes = Object.entries(notesVal);\r\n      notes = notes.map(note => ({id: note[0], ...note[1]})).reverse();\r\n      setNotes(notes);\r\n    })\r\n  },[]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <main className=\"wrapper\">\r\n        <div className=\"info\">\r\n          <h1>Bulletin Board</h1>\r\n          <NewNote/>\r\n        </div>\r\n        {\r\n          notes.map((note, index) => {\r\n            return (\r\n              <Notes \r\n                noteText={note.note} \r\n                key={index} \r\n                noteId={note.id}\r\n                noteImage={note.image}\r\n                altText={note.altText}\r\n                savedComments={note.comments}\r\n              />\r\n              \r\n            )\r\n          })\r\n        }          \r\n      </main>\r\n      <footer><p>Copyright <a href=\"https://www.louchaney.com\">Lou Chaney</a> 2022</p></footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}