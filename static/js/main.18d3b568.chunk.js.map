{"version":3,"sources":["Firebase.js","Comment.js","Note.js","NewNote.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Comment","className","this","props","commentText","Component","Notes","handleChange","e","setState","errorMessage","comment","target","value","handleSubmit","preventDefault","state","database","ref","noteId","child","push","savedComments","notes","commentsArray","Object","entries","commentsArray2","src","noteImage","alt","altText","noteText","action","for","onChange","name","id","cols","rows","placeholder","onClick","aria-label","reverse","map","key","NewNote","note","console","log","dbRef","axios","url","method","dataResponse","params","client_id","query","then","response","image","data","urls","regular","alt_description","comments","App","notesApp","on","snapshot","val","notesArray","newNoteProp","addNewNote","Note","newCommentProp","addNewComment","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18d3b568.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBqdnB6QWutk3c-fRetNJ9TGwD85ADZ9tk\",\r\n  authDomain: \"bulletin-board-6d24b.firebaseapp.com\",\r\n  databaseURL: \"https://bulletin-board-6d24b.firebaseio.com\",\r\n  projectId: \"bulletin-board-6d24b\",\r\n  storageBucket: \"bulletin-board-6d24b.appspot.com\",\r\n  messagingSenderId: \"261073442058\",\r\n  appId: \"1:261073442058:web:eab66046b4b18f8e9496f3\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Comment extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"comments\">\r\n                {this.props.commentText}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Comment;\r\n\r\n","import React, { Component } from \"react\";\r\nimport Comment from \"./Comment\"\r\nimport firebase from './Firebase.js';\r\n\r\n  class Notes extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n          comment: \"\",\r\n          savedComments: [],\r\n          notes: [],\r\n          errorMessage: \"\"\r\n        }\r\n    }\r\n\r\n    handleChange = e => {\r\n      this.setState({\r\n        //reset error message\r\n        errorMessage: \"\",\r\n        //record the user input\r\n        comment: e.target.value\r\n      });\r\n \r\n    };\r\n\r\n    handleSubmit = e => {\r\n      e.preventDefault()\r\n      if (this.state.comment !== \"\") {\r\n        //push comment to db\r\n        firebase.database().ref(this.props.noteId).child('comments').push(this.state.comment);\r\n        //reset error message\r\n        this.setState({\r\n          errorMessage: \"\"\r\n        })\r\n\r\n        \r\n\r\n        //reset the user input fields\r\n        this.setState({\r\n          comment: \"\"\r\n        });\r\n\r\n      } else {\r\n        this.setState({\r\n          errorMessage: \"please enter a comment\"\r\n        })\r\n      };      \r\n    };\r\n\r\n    \r\n    \r\n\r\n    render() {\r\n      const commentsArray = Object.entries(this.props.savedComments)\r\n      const commentsArray2 = Object.entries(commentsArray[1][1])\r\n      return (\r\n        <div className=\"note\">\r\n          <div>\r\n            <img src={this.props.noteImage} alt={this.props.altText}/>\r\n          </div>\r\n          <div className=\"noteContent\">\r\n            <p>\r\n                {this.props.noteText}\r\n            </p>\r\n          </div>\r\n          <div className=\"comment\">\r\n            <form action=\"\">\r\n              <label for=\"comment\" className=\"visuallyHidden\">Add your comment here</label>\r\n              {this.state.errorMessage !== '' ? <div className=\"error\">{this.state.errorMessage}</div> : ''}\r\n              <textarea onChange={this.handleChange} name=\"comment\" id=\"comment\" cols=\"30\" rows=\"3\" placeholder=\"comment\" value={this.state.comment}></textarea>\r\n              <button className=\"commentButton\" onClick={this.handleSubmit} name=\"addNote\" id=\"addNote\" aria-label=\"add comment\">+</button>\r\n            </form>\r\n          </div>\r\n\r\n            {\r\n              commentsArray2.reverse().map((comment) => {\r\n\r\n                return (\r\n                  <Comment key={comment[0]} noteId={this.props.noteId} commentText={comment[1]} />\r\n                  // <Comment key=\r\n\r\n                )\r\n              })\r\n            }      \r\n        </div>\r\n        \r\n      );\r\n    }\r\n  }\r\n\r\n\r\nexport default Notes;\r\n\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport firebase from './Firebase.js';\r\n\r\n  class NewNote extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        note: \"\",\r\n        image: \"\",\r\n        alt: \"\",\r\n        errorMessage: \"\"\r\n      };\r\n    }\r\n\r\n    handleChange = e => {\r\n      this.setState({\r\n        //reset error message\r\n        errorMessage: \"\",\r\n        //record the user input\r\n        note: e.target.value\r\n      });\r\n      console.log(this.state.note);\r\n    };\r\n\r\n    handleSubmit = e => {\r\n      e.preventDefault()\r\n\r\n      const dbRef = firebase.database().ref();\r\n\r\n      //check that input isn't empty then make api call for image then push to db\r\n      if (this.state.note !== \"\") {\r\n        axios({\r\n          url: `https://api.unsplash.com/photos/random`,\r\n          method: `GET`,\r\n          dataResponse: `json`,\r\n          params: {\r\n            client_id: `3538ec3e67ff5208b17b884280d4f5548757cf54956c39cbe73c070ec5442549`,\r\n            query: `cat`\r\n          }\r\n        }).then(response => {\r\n          console.log(response);\r\n          this.setState({\r\n            image: response.data.urls.regular,\r\n            alt: response.data.alt_description\r\n          });\r\n\r\n          dbRef.push({ comments: \"\", note: this.state.note, image: this.state.image, altText: this.state.alt });\r\n\r\n          //reset the user input fields\r\n          this.setState({\r\n            note: \"\",\r\n            errorMessage: \"\"\r\n          });\r\n        });\r\n\r\n      } else {\r\n        this.setState({\r\n          errorMessage: \"please enter a note\"\r\n        })\r\n      };       \r\n    };\r\n\r\n    render() {\r\n\r\n      return (\r\n        <div className=\"newNote\">\r\n          <form action=\"\">\r\n            <label for=\"newNote\" className=\"visuallyHidden\" >Add your note here</label>\r\n            {this.state.errorMessage !== '' ? <div className=\"error\">{this.state.errorMessage}</div> : ''}\r\n            <textarea onChange={this.handleChange} value={this.state.note} rows=\"12\" cols=\"30\" name=\"newNote\" id=\"newNote\" placeholder=\"add your note here\"\r\n            ></textarea>\r\n            <button onClick={this.handleSubmit} name=\"addNote\" id=\"addNote\" aria-label=\"add note\">\r\n              +\r\n            </button>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default NewNote;","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from './Firebase.js';\nimport Notes from './Note.js';\nimport NewNote from './NewNote.js';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      notesApp: [],\n      notes: [],\n      image: \"\",\n      alt: \"\"\n    }\n  }\n\n  //connect app to firebase\n  componentDidMount(){\n    const dbRef = firebase.database().ref();\n\n    //listen on the dbRef for when the value changes\n    dbRef.on('value', (snapshot) =>{\n      const notes = snapshot.val();\n      const notesArray = Object.entries(notes)    \n      this.setState({\n        notes: notesArray\n      })\n    })\n  }\n\n\n  render(){\n    return (\n      <div className=\"container\">\n        <main className=\"wrapper\">\n          <div className=\"info\">\n            <h1>Bulletin Board</h1>\n            <NewNote newNoteProp={this.addNewNote} />\n          </div>\n          {\n            this.state.notes.reverse().map((note) => {\n              return (\n                <Notes \n                  noteText={note[1].note} \n                  key={note[0]} \n                  noteId={note[0]}\n                  noteImage={note[1].image}\n                  altText={note[1].altText}\n                  savedComments={note[1]} \n                  newCommentProp={this.addNewComment} \n                />\n                \n              )\n            })\n          }          \n        </main>\n        <footer><p>Copyright <a href=\"https://www.louchaney.com\">Lou Chaney</a> 2019</p></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}